<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>API<sp/>Reference</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Header<sp/>files</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[EF_Driver_Common.h](#file-ef_driver_commonh)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[EF_TMR32.h](#file-ef_tmr32h)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[EF_TMR32_regs.h](#file-ef_tmr32_regsh)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_Driver_Common.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_C<sp/>header<sp/>file<sp/>for<sp/>common<sp/>driver<sp/>definitions<sp/>and<sp/>types._</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>uint32\_t<sp/>|<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/><sp/>&lt;br&gt;_A<sp/>type<sp/>that<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>driver<sp/>functions._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR**](#define-ef_driver_error)<sp/><sp/>((uint32\_t)1)&lt;br&gt;_Unspecified<sp/>error._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_BUSY**](#define-ef_driver_error_busy)<sp/><sp/>((uint32\_t)2)&lt;br&gt;_Driver<sp/>is<sp/>busy._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_PARAMETER**](#define-ef_driver_error_parameter)<sp/><sp/>((uint32\_t)5)&lt;br&gt;_Parameter<sp/>error._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_SPECIFIC**](#define-ef_driver_error_specific)<sp/><sp/>((uint32\_t)6)&lt;br&gt;_Start<sp/>of<sp/>driver<sp/>specific<sp/>errors._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_TIMEOUT**](#define-ef_driver_error_timeout)<sp/><sp/>((uint32\_t)3)&lt;br&gt;_Timeout<sp/>occurred._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_UNSUPPORTED**](#define-ef_driver_error_unsupported)<sp/><sp/>((uint32\_t)4)&lt;br&gt;_Operation<sp/>not<sp/>supported._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_OK**](#define-ef_driver_ok)<sp/><sp/>((uint32\_t)0)&lt;br&gt;_Operation<sp/>succeeded._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_DRIVER_STATUS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_A<sp/>type<sp/>that<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>driver<sp/>functions._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>uint32_t<sp/>EF_DRIVER_STATUS;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Unspecified<sp/>error._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR<sp/>((uint32_t)1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_BUSY`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Driver<sp/>is<sp/>busy._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_BUSY<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_PARAMETER`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Parameter<sp/>error._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_PARAMETER<sp/>((uint32_t)5)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_SPECIFIC`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Start<sp/>of<sp/>driver<sp/>specific<sp/>errors._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_SPECIFIC<sp/>((uint32_t)6)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_TIMEOUT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Timeout<sp/>occurred._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_TIMEOUT<sp/>((uint32_t)3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_UNSUPPORTED`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Operation<sp/>not<sp/>supported._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_UNSUPPORTED<sp/>((uint32_t)4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_OK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Operation<sp/>succeeded._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_OK<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_TMR32.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_C<sp/>header<sp/>file<sp/>for<sp/>TMR32<sp/>APIs<sp/>which<sp/>contains<sp/>the<sp/>function<sp/>prototypes._</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_PWM0Enable**](#function-ef_tmr32_pwm0enable)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Enables<sp/>PWM0<sp/>by<sp/>setting<sp/>&quot;P0E&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_PWM0Invert**](#function-ef_tmr32_pwm0invert)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Inverts<sp/>PWM0<sp/>output<sp/>by<sp/>setting<sp/>&quot;P0I&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_PWM1Enable**](#function-ef_tmr32_pwm1enable)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Enables<sp/>PWM1<sp/>by<sp/>setting<sp/>&quot;P1E&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_PWM1Invert**](#function-ef_tmr32_pwm1invert)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Inverts<sp/>PWM1<sp/>output<sp/>by<sp/>setting<sp/>&quot;P1I&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_PWMDeadtimeEnable**](#function-ef_tmr32_pwmdeadtimeenable)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_disable**](#function-ef_tmr32_disable)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Disables<sp/>timer<sp/>by<sp/>setting<sp/>&quot;TE&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_enable**](#function-ef_tmr32_enable)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Enables<sp/>timer<sp/>by<sp/>setting<sp/>&quot;TE&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_getIM**](#function-ef_tmr32_getim)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>\*IM\_value)<sp/>&lt;br&gt;_Retrieves<sp/>the<sp/>interrupt<sp/>clear<sp/>register<sp/>by<sp/>reading<sp/>the<sp/>ICR<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_getMIS**](#function-ef_tmr32_getmis)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>\*MIS\_value)<sp/>&lt;br&gt;_Retrieves<sp/>the<sp/>masked<sp/>interrupt<sp/>status<sp/>by<sp/>reading<sp/>the<sp/>MIS<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_getRIS**](#function-ef_tmr32_getris)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>\*RIS\_value)<sp/>&lt;br&gt;_Retrieves<sp/>the<sp/>raw<sp/>interrupt<sp/>status<sp/>by<sp/>reading<sp/>the<sp/>RIS<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_getTMR**](#function-ef_tmr32_gettmr)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>\*tmr\_value)<sp/>&lt;br&gt;_Retrieves<sp/>the<sp/>current<sp/>timer<sp/>value<sp/>by<sp/>reading<sp/>the<sp/>TMR<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_restart**](#function-ef_tmr32_restart)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Enables<sp/>timer<sp/>re-start;<sp/>used<sp/>in<sp/>the<sp/>one-shot<sp/>mode<sp/>to<sp/>restart<sp/>the<sp/>timer<sp/>by<sp/>setting<sp/>the<sp/>&quot;TS&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1<sp/>and<sp/>then<sp/>to<sp/>0._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setCMPX**](#function-ef_tmr32_setcmpx)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>compare<sp/>value<sp/>of<sp/>a<sp/>32-bit<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>CMPX<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setCMPY**](#function-ef_tmr32_setcmpy)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>compare<sp/>value<sp/>Y<sp/>of<sp/>a<sp/>32-bit<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>CMPY<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setDownCount**](#function-ef_tmr32_setdowncount)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>timer<sp/>direction<sp/>to<sp/>be<sp/>down<sp/>counting<sp/>by<sp/>setting<sp/>the<sp/>&quot;DIR&quot;<sp/>field<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0b01._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setGclkEnable**](#function-ef_tmr32_setgclkenable)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>GCLK<sp/>enable<sp/>bit<sp/>in<sp/>the<sp/>UART<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setICR**](#function-ef_tmr32_seticr)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>mask)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>interrupt<sp/>clear<sp/>register<sp/>of<sp/>the<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>ICR<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setIM**](#function-ef_tmr32_setim)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>mask)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>interrupt<sp/>mask<sp/>of<sp/>the<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>IM<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setOneShot**](#function-ef_tmr32_setoneshot)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>timer<sp/>to<sp/>operate<sp/>in<sp/>one-shot<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>&quot;P&quot;<sp/>bit<sp/>in<sp/>the<sp/>CFG<sp/>register<sp/>to<sp/>0._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPR**](#function-ef_tmr32_setpr)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>prescaler<sp/>value<sp/>of<sp/>the<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>PR<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0CenterAlignedMode**](#function-ef_tmr32_setpwm0centeralignedmode)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>reload\_value,<sp/>uint32\_t<sp/>cmpX\_value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>PWM0<sp/>center-aligned<sp/>mode._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0EdgeAlignmentMode**](#function-ef_tmr32_setpwm0edgealignmentmode)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>reload\_value,<sp/>uint32\_t<sp/>duty\_cycle)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>PWM0<sp/>edge<sp/>alignment<sp/>mode._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0MatchingCMPXDownCountAction**](#function-ef_tmr32_setpwm0matchingcmpxdowncountaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0MatchingCMPXUpCountAction**](#function-ef_tmr32_setpwm0matchingcmpxupcountaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0MatchingCMPYDownCountAction**](#function-ef_tmr32_setpwm0matchingcmpydowncountaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0MatchingCMPYUpCountAction**](#function-ef_tmr32_setpwm0matchingcmpyupcountaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0MatchingRELOADAction**](#function-ef_tmr32_setpwm0matchingreloadaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM0MatchingZeroAction**](#function-ef_tmr32_setpwm0matchingzeroaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1CenterAlignedMode**](#function-ef_tmr32_setpwm1centeralignedmode)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>reload\_value,<sp/>uint32\_t<sp/>cmpX\_value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>PWM1<sp/>center-aligned<sp/>mode._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1EdgeAlignmentMode**](#function-ef_tmr32_setpwm1edgealignmentmode)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>reload\_value,<sp/>uint32\_t<sp/>duty\_cycle)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>PWM1<sp/>edge<sp/>alignment<sp/>mode._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1MatchingCMPXDownCountAction**](#function-ef_tmr32_setpwm1matchingcmpxdowncountaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1MatchingCMPXUpCountingAction**](#function-ef_tmr32_setpwm1matchingcmpxupcountingaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1MatchingCMPYDownCountAction**](#function-ef_tmr32_setpwm1matchingcmpydowncountaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1MatchingCMPYUpCountingAction**](#function-ef_tmr32_setpwm1matchingcmpyupcountingaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1MatchingRELOADAction**](#function-ef_tmr32_setpwm1matchingreloadaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWM1MatchingZeroAction**](#function-ef_tmr32_setpwm1matchingzeroaction)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>action)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPWMDeadtime**](#function-ef_tmr32_setpwmdeadtime)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>PWM<sp/>dead<sp/>time<sp/>value<sp/>of<sp/>the<sp/>PWM<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>PWMDT<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setPeriodic**](#function-ef_tmr32_setperiodic)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>timer<sp/>to<sp/>operate<sp/>in<sp/>periodic<sp/>mode<sp/>by<sp/>setting<sp/>the<sp/>&quot;P&quot;<sp/>bit<sp/>in<sp/>the<sp/>CFG<sp/>register<sp/>to<sp/>1._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setRELOAD**](#function-ef_tmr32_setreload)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>reload<sp/>value<sp/>of<sp/>a<sp/>32-bit<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>RELOAD<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setUpCount**](#function-ef_tmr32_setupcount)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>timer<sp/>direction<sp/>to<sp/>be<sp/>up<sp/>counting<sp/>by<sp/>setting<sp/>the<sp/>&quot;DIR&quot;<sp/>field<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0b10._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_TMR32\_setUpDownCount**](#function-ef_tmr32_setupdowncount)<sp/>([**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>tmr32)<sp/>&lt;br&gt;_Sets<sp/>the<sp/>timer<sp/>direction<sp/>to<sp/>be<sp/>up/down<sp/>counting<sp/>by<sp/>setting<sp/>the<sp/>&quot;DIR&quot;<sp/>field<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0b11._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_ACTION\_HIGH**](#define-ef_tmr32_action_high)<sp/><sp/>((uint32\_t)2)&lt;br&gt;_Set<sp/>output<sp/>to<sp/>HIGH<sp/>when<sp/>match<sp/>occurs._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_ACTION\_INVERT**](#define-ef_tmr32_action_invert)<sp/><sp/>((uint32\_t)3)&lt;br&gt;_Invert<sp/>the<sp/>output<sp/>when<sp/>match<sp/>occurs._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_ACTION\_LOW**](#define-ef_tmr32_action_low)<sp/><sp/>((uint32\_t)1)&lt;br&gt;_Set<sp/>output<sp/>to<sp/>LOW<sp/>when<sp/>match<sp/>occurs._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_ACTION\_MAX\_VALUE**](#define-ef_tmr32_action_max_value)<sp/><sp/>((uint32\_t)3)&lt;br&gt;_Maximum<sp/>value<sp/>for<sp/>the<sp/>action<sp/>field._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_ACTION\_NONE**](#define-ef_tmr32_action_none)<sp/><sp/>((uint32\_t)0)&lt;br&gt;_No<sp/>action<sp/>on<sp/>match<sp/>(do<sp/>nothing)_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_ICR\_MAX\_VALUE**](#define-ef_tmr32_icr_max_value)<sp/><sp/>((uint32\_t)2)&lt;br&gt;_Maximum<sp/>value<sp/>for<sp/>the<sp/>ICR<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_IM\_MAX\_VALUE**](#define-ef_tmr32_im_max_value)<sp/><sp/>((uint32\_t)2)&lt;br&gt;_Maximum<sp/>value<sp/>for<sp/>the<sp/>IM<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PR\_MAX\_VALUE**](#define-ef_tmr32_pr_max_value)<sp/><sp/>((uint32\_t)0x0000FFFF)&lt;br&gt;_Maximum<sp/>value<sp/>for<sp/>the<sp/>PR<sp/>register._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWMDT\_MAX\_VALUE**](#define-ef_tmr32_pwmdt_max_value)<sp/><sp/>((uint32\_t)0x000000FF)&lt;br&gt;_Maximum<sp/>value<sp/>for<sp/>the<sp/>deadtime<sp/>register._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_PWM0Enable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Enables<sp/>PWM0<sp/>by<sp/>setting<sp/>&quot;P0E&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_PWM0Enable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_PWM0Invert`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Inverts<sp/>PWM0<sp/>output<sp/>by<sp/>setting<sp/>&quot;P0I&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_PWM0Invert<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_PWM1Enable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Enables<sp/>PWM1<sp/>by<sp/>setting<sp/>&quot;P1E&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_PWM1Enable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_PWM1Invert`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Inverts<sp/>PWM1<sp/>output<sp/>by<sp/>setting<sp/>&quot;P1I&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_PWM1Invert<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_PWMDeadtimeEnable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_PWMDeadtimeEnable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Enables<sp/>PWM<sp/>dead-time<sp/>by<sp/>setting<sp/>the<sp/>&quot;DTE&quot;<sp/>(Dead-Time<sp/>Enable)<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1.<sp/>Dead-time<sp/>is<sp/>a<sp/>critical<sp/>feature<sp/>in<sp/>PWM<sp/>signal<sp/>generation<sp/>used<sp/>to<sp/>ensure<sp/>a<sp/>safe<sp/>period<sp/>between<sp/>switching<sp/>the<sp/>high<sp/>and<sp/>low<sp/>states,<sp/>preventing<sp/>short<sp/>circuits<sp/>or<sp/>other<sp/>issues<sp/>in<sp/>systems<sp/>with<sp/>complementary<sp/>outputs,<sp/>such<sp/>as<sp/>H-bridge<sp/>drivers.<sp/>When<sp/>enabled,<sp/>the<sp/>&quot;DTE&quot;<sp/>bit<sp/>introduces<sp/>a<sp/>fixed<sp/>delay<sp/>between<sp/>the<sp/>switching<sp/>of<sp/>PWM<sp/>channels<sp/>to<sp/>allow<sp/>for<sp/>this<sp/>safety<sp/>margin.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_disable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Disables<sp/>timer<sp/>by<sp/>setting<sp/>&quot;TE&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_disable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_enable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Enables<sp/>timer<sp/>by<sp/>setting<sp/>&quot;TE&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_enable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_getIM`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Retrieves<sp/>the<sp/>interrupt<sp/>clear<sp/>register<sp/>by<sp/>reading<sp/>the<sp/>ICR<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_getIM<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*IM_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`IM_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>uint32\_t<sp/>where<sp/>the<sp/>interrupt<sp/>clear<sp/>value<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_getMIS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Retrieves<sp/>the<sp/>masked<sp/>interrupt<sp/>status<sp/>by<sp/>reading<sp/>the<sp/>MIS<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_getMIS<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*MIS_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`MIS_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>uint32\_t<sp/>where<sp/>the<sp/>masked<sp/>interrupt<sp/>status<sp/>value<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_getRIS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Retrieves<sp/>the<sp/>raw<sp/>interrupt<sp/>status<sp/>by<sp/>reading<sp/>the<sp/>RIS<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_getRIS<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*RIS_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`RIS_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>uint32\_t<sp/>where<sp/>the<sp/>raw<sp/>interrupt<sp/>status<sp/>value<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_getTMR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Retrieves<sp/>the<sp/>current<sp/>timer<sp/>value<sp/>by<sp/>reading<sp/>the<sp/>TMR<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_getTMR<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*tmr_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`tmr_value`<sp/>A<sp/>pointer<sp/>to<sp/>a<sp/>uint32\_t<sp/>where<sp/>the<sp/>timer<sp/>value<sp/>will<sp/>be<sp/>stored.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_restart`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Enables<sp/>timer<sp/>re-start;<sp/>used<sp/>in<sp/>the<sp/>one-shot<sp/>mode<sp/>to<sp/>restart<sp/>the<sp/>timer<sp/>by<sp/>setting<sp/>the<sp/>&quot;TS&quot;<sp/>bit<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>1<sp/>and<sp/>then<sp/>to<sp/>0._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_restart<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setCMPX`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>compare<sp/>value<sp/>of<sp/>a<sp/>32-bit<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>CMPX<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setCMPX<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>compare<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>CMPX<sp/>register.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setCMPY`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>compare<sp/>value<sp/>Y<sp/>of<sp/>a<sp/>32-bit<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>CMPY<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setCMPY<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>compare<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>CMPY<sp/>register.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setDownCount`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>timer<sp/>direction<sp/>to<sp/>be<sp/>down<sp/>counting<sp/>by<sp/>setting<sp/>the<sp/>&quot;DIR&quot;<sp/>field<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0b01._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setDownCount<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setGclkEnable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>GCLK<sp/>enable<sp/>bit<sp/>in<sp/>the<sp/>UART<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setGclkEnable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>GCLK<sp/>enable<sp/>bit</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setICR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>interrupt<sp/>clear<sp/>register<sp/>of<sp/>the<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>ICR<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setICR<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`mask`<sp/>The<sp/>interrupt<sp/>clear<sp/>mask<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>ICR<sp/>register.<sp/>Must<sp/>not<sp/>exceed<sp/>[**EF\_TMR32\_ICR\_MAX\_VALUE**](#define-ef_tmr32_icr_max_value).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setIM`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>interrupt<sp/>mask<sp/>of<sp/>the<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>IM<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setIM<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`mask`<sp/>The<sp/>interrupt<sp/>mask<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>IM<sp/>register.<sp/>Must<sp/>not<sp/>exceed<sp/>[**EF\_TMR32\_IM\_MAX\_VALUE**](#define-ef_tmr32_im_max_value).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setOneShot`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>timer<sp/>to<sp/>operate<sp/>in<sp/>one-shot<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>&quot;P&quot;<sp/>bit<sp/>in<sp/>the<sp/>CFG<sp/>register<sp/>to<sp/>0._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setOneShot<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>prescaler<sp/>value<sp/>of<sp/>the<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>PR<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPR<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>prescaler<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PR<sp/>register.<sp/>Must<sp/>not<sp/>exceed<sp/>[**EF\_TMR32\_PR\_MAX\_VALUE**](#define-ef_tmr32_pr_max_value).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0CenterAlignedMode`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>PWM0<sp/>center-aligned<sp/>mode._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0CenterAlignedMode<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reload_value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cmpX_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`reload_value`<sp/>The<sp/>reload<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PWM0CFG<sp/>register.<sp/>This<sp/>determines<sp/>the<sp/>period<sp/>of<sp/>the<sp/>PWM<sp/>signal.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`cmpX_value`<sp/>The<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>CMPX<sp/>register.<sp/>This<sp/>value<sp/>controls<sp/>the<sp/>point<sp/>at<sp/>which<sp/>the<sp/>PWM<sp/>signal<sp/>transitions<sp/>from<sp/>high<sp/>to<sp/>low<sp/>(or<sp/>vice<sp/>versa)<sp/>in<sp/>the<sp/>center-aligned<sp/>mode.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_OK:<sp/>Configuration<sp/>was<sp/>successful.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_PARAMETER:<sp/>Invalid<sp/>input<sp/>parameters,<sp/>such<sp/>as<sp/>`tmr32`<sp/>being<sp/>NULL.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>configures<sp/>the<sp/>specified<sp/>32-bit<sp/>timer<sp/>(`tmr32`)<sp/>to<sp/>generate<sp/>a<sp/>PWM<sp/>signal<sp/>with<sp/>center-alignment<sp/>on<sp/>PWM0.<sp/>It<sp/>sets<sp/>the<sp/>timer<sp/>to<sp/>up-down<sp/>counting<sp/>mode<sp/>and<sp/>periodic<sp/>mode,<sp/>configures<sp/>the<sp/>zero<sp/>and<sp/>compare<sp/>actions,<sp/>and<sp/>sets<sp/>the<sp/>reload<sp/>and<sp/>compare<sp/>values<sp/>as<sp/>specified.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Internal<sp/>configurations<sp/>performed<sp/>by<sp/>the<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>timer<sp/>to<sp/>up-down<sp/>counting<sp/>mode.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>timer<sp/>for<sp/>periodic<sp/>operation.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>zero<sp/>action<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>high.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>low<sp/>on<sp/>up-count.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>high<sp/>on<sp/>down-count.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>Y<sp/>compare<sp/>register<sp/>to<sp/>maintain<sp/>the<sp/>current<sp/>output<sp/>state<sp/>on<sp/>both<sp/>up<sp/>and<sp/>down<sp/>counts.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>reload<sp/>value<sp/>to<sp/>define<sp/>the<sp/>PWM<sp/>signal<sp/>period.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>value<sp/>to<sp/>define<sp/>the<sp/>transition<sp/>point.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>PWM<sp/>waveform:<sp/></highlight></codeline>
<codeline><highlight class="normal">````cpp</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|\</highlight></codeline>
<codeline><highlight class="normal">|_____/__|__\</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/>/<sp/>|<sp/><sp/>|<sp/><sp/>|<sp/>\</highlight></codeline>
<codeline><highlight class="normal">|_/___|__|__|___\__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/><sp/><sp/><sp/><sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>____<sp/><sp/><sp/><sp/><sp/><sp/><sp/>____</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|_____|<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ensure<sp/>the<sp/>timer<sp/>instance<sp/>(`tmr32`)<sp/>is<sp/>correctly<sp/>initialized<sp/>before<sp/>calling<sp/>this<sp/>function.<sp/>The<sp/>reload<sp/>value<sp/>and<sp/>compare<sp/>value<sp/>must<sp/>align<sp/>with<sp/>the<sp/>timer&apos;s<sp/>capabilities<sp/>and<sp/>clock<sp/>settings.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0EdgeAlignmentMode`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>PWM0<sp/>edge<sp/>alignment<sp/>mode._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0EdgeAlignmentMode<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reload_value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>duty_cycle</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`reload_value`<sp/>The<sp/>reload<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PWM0CFG<sp/>register.<sp/>This<sp/>determines<sp/>the<sp/>period<sp/>of<sp/>the<sp/>PWM<sp/>signal.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`duty_cycle`<sp/>The<sp/>duty<sp/>cycle<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PWM0CFG<sp/>register,<sp/>representing<sp/>the<sp/>high<sp/>time<sp/>as<sp/>a<sp/>percentage<sp/>of<sp/>the<sp/>period<sp/>(0<sp/>to<sp/>100).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_OK:<sp/>Configuration<sp/>was<sp/>successful.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_PARAMETER:<sp/>Invalid<sp/>input<sp/>parameters,<sp/>such<sp/>as<sp/>`tmr32`<sp/>being<sp/>NULL<sp/>or`duty_cycle`<sp/>&amp;gt;<sp/>100.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>configures<sp/>the<sp/>specified<sp/>32-bit<sp/>timer<sp/>(`tmr32`)<sp/>to<sp/>generate<sp/>a<sp/>PWM<sp/>signal<sp/>with<sp/>edge<sp/>alignment.<sp/>It<sp/>sets<sp/>the<sp/>timer<sp/>to<sp/>up-count<sp/>and<sp/>periodic<sp/>modes,<sp/>configures<sp/>the<sp/>zero<sp/>action<sp/>to<sp/>high,<sp/>and<sp/>uses<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>to<sp/>control<sp/>the<sp/>output<sp/>signal.<sp/>The<sp/>duty<sp/>cycle<sp/>and<sp/>reload<sp/>values<sp/>are<sp/>used<sp/>to<sp/>compute<sp/>the<sp/>compare<sp/>register<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Internal<sp/>configurations<sp/>performed<sp/>by<sp/>the<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>timer<sp/>to<sp/>up-count<sp/>mode.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>timer<sp/>for<sp/>periodic<sp/>operation.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>zero<sp/>action<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>high.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>low<sp/>on<sp/>up-count.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>Y<sp/>compare<sp/>register<sp/>to<sp/>maintain<sp/>the<sp/>current<sp/>output<sp/>state.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Calculates<sp/>the<sp/>X<sp/>compare<sp/>value<sp/>based<sp/>on<sp/>the<sp/>duty<sp/>cycle<sp/>and<sp/>reload<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>reload<sp/>value<sp/>and<sp/>compare<sp/>register.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ensures<sp/>no<sp/>change<sp/>in<sp/>output<sp/>on<sp/>the<sp/>top<sp/>action.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>PWM<sp/>waveform:<sp/></highlight></codeline>
<codeline><highlight class="normal">````cpp</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|<sp/><sp/><sp/><sp/><sp/><sp/>/|</highlight></codeline>
<codeline><highlight class="normal">|_____/__|____/<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/>/<sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>|<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|_/___|__|/___|__|____</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/><sp/><sp/><sp/><sp/><sp/><sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>____<sp/><sp/><sp/><sp/>____<sp/><sp/><sp/><sp/>___<sp/><sp/><sp/>___</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|__|<sp/><sp/><sp/><sp/>|__|<sp/><sp/><sp/>|__|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>duty<sp/><sp/><sp/><sp/>duty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cycle<sp/><sp/><sp/>cycle</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ensure<sp/>the<sp/>timer<sp/>instance<sp/>(`tmr32`)<sp/>is<sp/>correctly<sp/>initialized<sp/>before<sp/>calling<sp/>this<sp/>function.<sp/>The<sp/>reload<sp/>value<sp/>and<sp/>compare<sp/>value<sp/>must<sp/>align<sp/>with<sp/>the<sp/>timer&apos;s<sp/>capabilities<sp/>and<sp/>clock<sp/>settings.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0MatchingCMPXDownCountAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0MatchingCMPXDownCountAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR0<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>down<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM0<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM0CFG\_REG\_E5\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0MatchingCMPXUpCountAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0MatchingCMPXUpCountAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR0<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>up<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM0<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM0CFG\_REG\_E1\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0MatchingCMPYDownCountAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0MatchingCMPYDownCountAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR0<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>down<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM0<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM0CFG\_REG\_E4\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0MatchingCMPYUpCountAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0MatchingCMPYUpCountAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR0<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>up<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM0<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM0CFG\_REG\_E2\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0MatchingRELOADAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0MatchingRELOADAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR0<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>RELOAD<sp/>value.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>RELOAD<sp/>value.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM0<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM0CFG\_REG\_E3\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>RELOAD<sp/>value.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM0MatchingZeroAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM0MatchingZeroAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR0<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>Zero<sp/>value.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>reaches<sp/>zero.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM0<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E0\_BIT**](#define-ef_tmr32_pwm0cfg_reg_e0_bit).<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>Zero<sp/>value.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1CenterAlignedMode`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>PWM1<sp/>center-aligned<sp/>mode._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1CenterAlignedMode<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reload_value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cmpX_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`reload_value`<sp/>The<sp/>reload<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PWM1CFG<sp/>register.<sp/>This<sp/>determines<sp/>the<sp/>period<sp/>of<sp/>the<sp/>PWM<sp/>signal.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`cmpX_value`<sp/>The<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>CMPX<sp/>register.<sp/>This<sp/>value<sp/>controls<sp/>the<sp/>point<sp/>at<sp/>which<sp/>the<sp/>PWM<sp/>signal<sp/>transitions<sp/>from<sp/>high<sp/>to<sp/>low<sp/>(or<sp/>vice<sp/>versa)<sp/>in<sp/>the<sp/>center-aligned<sp/>mode.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_OK:<sp/>Configuration<sp/>was<sp/>successful.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_PARAMETER:<sp/>Invalid<sp/>input<sp/>parameters,<sp/>such<sp/>as<sp/>`tmr32`<sp/>being<sp/>NULL.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>configures<sp/>the<sp/>specified<sp/>32-bit<sp/>timer<sp/>(`tmr32`)<sp/>to<sp/>generate<sp/>a<sp/>PWM<sp/>signal<sp/>with<sp/>center-alignment<sp/>on<sp/>PWM1.<sp/>It<sp/>sets<sp/>the<sp/>timer<sp/>to<sp/>up-down<sp/>counting<sp/>mode<sp/>and<sp/>periodic<sp/>mode,<sp/>configures<sp/>the<sp/>zero<sp/>and<sp/>compare<sp/>actions,<sp/>and<sp/>sets<sp/>the<sp/>reload<sp/>and<sp/>compare<sp/>values<sp/>as<sp/>specified.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Internal<sp/>configurations<sp/>performed<sp/>by<sp/>the<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>timer<sp/>to<sp/>up-down<sp/>counting<sp/>mode.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>timer<sp/>for<sp/>periodic<sp/>operation.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>zero<sp/>action<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>high.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>Y<sp/>compare<sp/>register<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>low<sp/>on<sp/>up-count.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>Y<sp/>compare<sp/>register<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>high<sp/>on<sp/>down-count.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>to<sp/>maintain<sp/>the<sp/>current<sp/>output<sp/>state<sp/>on<sp/>both<sp/>up<sp/>and<sp/>down<sp/>counts.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>reload<sp/>value<sp/>to<sp/>define<sp/>the<sp/>PWM<sp/>signal<sp/>period.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>value<sp/>to<sp/>define<sp/>the<sp/>transition<sp/>point.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>PWM<sp/>waveform:<sp/></highlight></codeline>
<codeline><highlight class="normal">````cpp</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|\</highlight></codeline>
<codeline><highlight class="normal">|_____/__|__\</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/>/<sp/>|<sp/><sp/>|<sp/><sp/>|<sp/>\</highlight></codeline>
<codeline><highlight class="normal">|_/___|__|__|___\__</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/><sp/><sp/><sp/><sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>____<sp/><sp/><sp/><sp/><sp/><sp/><sp/>____<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|_____|<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ensure<sp/>the<sp/>timer<sp/>instance<sp/>(`tmr32`)<sp/>is<sp/>correctly<sp/>initialized<sp/>before<sp/>calling<sp/>this<sp/>function.<sp/>The<sp/>reload<sp/>value<sp/>and<sp/>compare<sp/>value<sp/>must<sp/>align<sp/>with<sp/>the<sp/>timer&apos;s<sp/>capabilities<sp/>and<sp/>clock<sp/>settings.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1EdgeAlignmentMode`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>PWM1<sp/>edge<sp/>alignment<sp/>mode._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1EdgeAlignmentMode<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reload_value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>duty_cycle</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`reload_value`<sp/>The<sp/>reload<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PWM1CFG<sp/>register.<sp/>This<sp/>determines<sp/>the<sp/>period<sp/>of<sp/>the<sp/>PWM<sp/>signal.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`duty_cycle`<sp/>The<sp/>duty<sp/>cycle<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PWM1CFG<sp/>register,<sp/>representing<sp/>the<sp/>high<sp/>time<sp/>as<sp/>a<sp/>percentage<sp/>of<sp/>the<sp/>period<sp/>(0<sp/>to<sp/>100).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_OK:<sp/>Configuration<sp/>was<sp/>successful.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>EF\_DRIVER\_ERROR\_PARAMETER:<sp/>Invalid<sp/>input<sp/>parameters,<sp/>such<sp/>as<sp/>`tmr32`<sp/>being<sp/>NULL<sp/>or`duty_cycle`<sp/>&amp;gt;<sp/>100.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>function<sp/>configures<sp/>the<sp/>specified<sp/>32-bit<sp/>timer<sp/>(`tmr32`)<sp/>to<sp/>generate<sp/>a<sp/>PWM<sp/>signal<sp/>with<sp/>edge<sp/>alignment<sp/>on<sp/>PWM1.<sp/>It<sp/>sets<sp/>the<sp/>timer<sp/>to<sp/>up-count<sp/>and<sp/>periodic<sp/>modes,<sp/>configures<sp/>the<sp/>zero<sp/>action<sp/>to<sp/>high,<sp/>and<sp/>uses<sp/>the<sp/>Y<sp/>compare<sp/>register<sp/>to<sp/>control<sp/>the<sp/>output<sp/>signal.<sp/>The<sp/>duty<sp/>cycle<sp/>and<sp/>reload<sp/>values<sp/>are<sp/>used<sp/>to<sp/>compute<sp/>the<sp/>compare<sp/>register<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Internal<sp/>configurations<sp/>performed<sp/>by<sp/>the<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>timer<sp/>to<sp/>up-count<sp/>mode.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>timer<sp/>for<sp/>periodic<sp/>operation.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>zero<sp/>action<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>high.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>Y<sp/>compare<sp/>register<sp/>to<sp/>drive<sp/>the<sp/>PWM<sp/>output<sp/>low<sp/>on<sp/>up-count.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Configures<sp/>the<sp/>X<sp/>compare<sp/>register<sp/>to<sp/>maintain<sp/>the<sp/>current<sp/>output<sp/>state.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Calculates<sp/>the<sp/>Y<sp/>compare<sp/>value<sp/>based<sp/>on<sp/>the<sp/>duty<sp/>cycle<sp/>and<sp/>reload<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Sets<sp/>the<sp/>reload<sp/>value<sp/>and<sp/>compare<sp/>register.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Ensures<sp/>no<sp/>change<sp/>in<sp/>output<sp/>on<sp/>the<sp/>top<sp/>action.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Example<sp/>PWM<sp/>waveform:<sp/></highlight></codeline>
<codeline><highlight class="normal">````cpp</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/|<sp/><sp/><sp/><sp/><sp/><sp/>/|</highlight></codeline>
<codeline><highlight class="normal">|_____/__|____/<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/>/<sp/>|<sp/><sp/>|<sp/><sp/>/<sp/>|<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|_/___|__|/___|__|____</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>V<sp/><sp/><sp/><sp/><sp/><sp/><sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>____<sp/><sp/><sp/><sp/>____<sp/><sp/><sp/><sp/>___<sp/><sp/><sp/>___</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>|__|<sp/><sp/><sp/><sp/>|__|<sp/><sp/><sp/>|__|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>duty<sp/><sp/><sp/><sp/>duty</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>cycle<sp/><sp/><sp/>cycle</highlight></codeline>
<codeline><highlight class="normal">````</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Ensure<sp/>the<sp/>timer<sp/>instance<sp/>(`tmr32`)<sp/>is<sp/>correctly<sp/>initialized<sp/>before<sp/>calling<sp/>this<sp/>function.<sp/>The<sp/>reload<sp/>value<sp/>and<sp/>compare<sp/>value<sp/>must<sp/>align<sp/>with<sp/>the<sp/>timer&apos;s<sp/>capabilities<sp/>and<sp/>clock<sp/>settings.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1MatchingCMPXDownCountAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1MatchingCMPXDownCountAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR1<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>down<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM1<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM1CFG\_REG\_E5\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1MatchingCMPXUpCountingAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1MatchingCMPXUpCountingAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR1<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>up<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM1<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM1CFG\_REG\_E1\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPX<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1MatchingCMPYDownCountAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1MatchingCMPYDownCountAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR1<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>down<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM1<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM1CFG\_REG\_E4\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>down.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1MatchingCMPYUpCountingAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1MatchingCMPYUpCountingAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR1<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>up<sp/>counting.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM1<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM1CFG\_REG\_E2\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>CMPY<sp/>value<sp/>while<sp/>counting<sp/>up.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1MatchingRELOADAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1MatchingRELOADAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR1<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>RELOAD<sp/>value.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>matches<sp/>the<sp/>RELOAD<sp/>value.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM1<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>EF\_TMR32\_PWM1CFG\_REG\_E3\_BI.<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>RELOAD<sp/>value.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWM1MatchingZeroAction`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWM1MatchingZeroAction<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>action</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Configures<sp/>the<sp/>action<sp/>of<sp/>TMR1<sp/>PWM<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>Zero<sp/>value.<sp/>This<sp/>function<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>specify<sp/>what<sp/>happens<sp/>to<sp/>the<sp/>PWM<sp/>output<sp/>signal<sp/>when<sp/>the<sp/>timer<sp/>counter<sp/>reaches<sp/>zero.<sp/>The<sp/>available<sp/>actions<sp/>are:<sp/>no<sp/>action,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>LOW,<sp/>set<sp/>the<sp/>output<sp/>to<sp/>HIGH,<sp/>or<sp/>invert<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>output.<sp/>The<sp/>action<sp/>is<sp/>configured<sp/>in<sp/>the<sp/>PWM1<sp/>configuration<sp/>register<sp/>by<sp/>modifying<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E0\_BIT**](#define-ef_tmr32_pwm1cfg_reg_e0_bit).<sp/>This<sp/>is<sp/>commonly<sp/>used<sp/>in<sp/>PWM<sp/>applications<sp/>to<sp/>define<sp/>the<sp/>output<sp/>response<sp/>when<sp/>the<sp/>counter<sp/>reaches<sp/>a<sp/>particular<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`action`<sp/>A<sp/>uint32\_t<sp/>value<sp/>specifying<sp/>the<sp/>action<sp/>to<sp/>take<sp/>when<sp/>the<sp/>timer<sp/>matches<sp/>the<sp/>Zero<sp/>value.<sp/>The<sp/>possible<sp/>values<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_NONE:<sp/>No<sp/>action<sp/>(do<sp/>nothing)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_LOW:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>LOW</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_HIGH:<sp/>Set<sp/>the<sp/>PWM<sp/>output<sp/>to<sp/>HIGH</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EF\_TMR32\_ACTION\_INVERT:<sp/>Invert<sp/>the<sp/>current<sp/>output<sp/>state</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPWMDeadtime`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>PWM<sp/>dead<sp/>time<sp/>value<sp/>of<sp/>the<sp/>PWM<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>PWMDT<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPWMDeadtime<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>dead<sp/>time<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>PWMDT<sp/>register.<sp/>Must<sp/>not<sp/>exceed<sp/>[**EF\_TMR32\_PWMDT\_MAX\_VALUE**](#define-ef_tmr32_pwmdt_max_value).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setPeriodic`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>timer<sp/>to<sp/>operate<sp/>in<sp/>periodic<sp/>mode<sp/>by<sp/>setting<sp/>the<sp/>&quot;P&quot;<sp/>bit<sp/>in<sp/>the<sp/>CFG<sp/>register<sp/>to<sp/>1._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setPeriodic<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setRELOAD`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>reload<sp/>value<sp/>of<sp/>a<sp/>32-bit<sp/>timer<sp/>by<sp/>writing<sp/>to<sp/>the<sp/>RELOAD<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setRELOAD<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr),<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>reload<sp/>value<sp/>to<sp/>set<sp/>in<sp/>the<sp/>RELOAD<sp/>register.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>EF\_DRIVER\_STATUS:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code.</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setUpCount`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>timer<sp/>direction<sp/>to<sp/>be<sp/>up<sp/>counting<sp/>by<sp/>setting<sp/>the<sp/>&quot;DIR&quot;<sp/>field<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0b10._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setUpCount<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_TMR32_setUpDownCount`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Sets<sp/>the<sp/>timer<sp/>direction<sp/>to<sp/>be<sp/>up/down<sp/>counting<sp/>by<sp/>setting<sp/>the<sp/>&quot;DIR&quot;<sp/>field<sp/>in<sp/>the<sp/>CTRL<sp/>register<sp/>to<sp/>0b11._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_TMR32_setUpDownCount<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_TMR32_TYPE_PTR<sp/>tmr32</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`tmr32`<sp/>An<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>TMR32<sp/>registers.[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>TMR32<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_ACTION_HIGH`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Set<sp/>output<sp/>to<sp/>HIGH<sp/>when<sp/>match<sp/>occurs._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_ACTION_HIGH<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_ACTION_INVERT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Invert<sp/>the<sp/>output<sp/>when<sp/>match<sp/>occurs._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_ACTION_INVERT<sp/>((uint32_t)3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_ACTION_LOW`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Set<sp/>output<sp/>to<sp/>LOW<sp/>when<sp/>match<sp/>occurs._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_ACTION_LOW<sp/>((uint32_t)1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_ACTION_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Maximum<sp/>value<sp/>for<sp/>the<sp/>action<sp/>field._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_ACTION_MAX_VALUE<sp/>((uint32_t)3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_ACTION_NONE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_No<sp/>action<sp/>on<sp/>match<sp/>(do<sp/>nothing)_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_ACTION_NONE<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_ICR_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Maximum<sp/>value<sp/>for<sp/>the<sp/>ICR<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_ICR_MAX_VALUE<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_IM_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Maximum<sp/>value<sp/>for<sp/>the<sp/>IM<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_IM_MAX_VALUE<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PR_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Maximum<sp/>value<sp/>for<sp/>the<sp/>PR<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PR_MAX_VALUE<sp/>((uint32_t)0x0000FFFF)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWMDT_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Maximum<sp/>value<sp/>for<sp/>the<sp/>deadtime<sp/>register._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWMDT_MAX_VALUE<sp/>((uint32_t)0x000000FF)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_TMR32_regs.h</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>struct<sp/>[**\_EF\_TMR32\_TYPE\_**](#struct-_ef_tmr32_type_)<sp/>|<sp/>[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>[**EF\_TMR32\_TYPE**](#typedef-ef_tmr32_type)<sp/>\*<sp/>|<sp/>[**EF\_TMR32\_TYPE\_PTR**](#typedef-ef_tmr32_type_ptr)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>struct<sp/>|<sp/>[**\_EF\_TMR32\_TYPE\_**](#struct-_ef_tmr32_type_)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CFG\_REG\_DIR\_BIT**](#define-ef_tmr32_cfg_reg_dir_bit)<sp/><sp/>(uint32\_t)(0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CFG\_REG\_DIR\_MASK**](#define-ef_tmr32_cfg_reg_dir_mask)<sp/><sp/>(uint32\_t)(0x3)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CFG\_REG\_P\_BIT**](#define-ef_tmr32_cfg_reg_p_bit)<sp/><sp/>(uint32\_t)(2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CFG\_REG\_P\_MASK**](#define-ef_tmr32_cfg_reg_p_mask)<sp/><sp/>(uint32\_t)(0x4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_DTE\_BIT**](#define-ef_tmr32_ctrl_reg_dte_bit)<sp/><sp/>(uint32\_t)(4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_DTE\_MASK**](#define-ef_tmr32_ctrl_reg_dte_mask)<sp/><sp/>(uint32\_t)(0x10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_P0E\_BIT**](#define-ef_tmr32_ctrl_reg_p0e_bit)<sp/><sp/>(uint32\_t)(2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_P0E\_MASK**](#define-ef_tmr32_ctrl_reg_p0e_mask)<sp/><sp/>(uint32\_t)(0x4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_P1E\_BIT**](#define-ef_tmr32_ctrl_reg_p1e_bit)<sp/><sp/>(uint32\_t)(3)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_P1E\_MASK**](#define-ef_tmr32_ctrl_reg_p1e_mask)<sp/><sp/>(uint32\_t)(0x8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_PI0\_BIT**](#define-ef_tmr32_ctrl_reg_pi0_bit)<sp/><sp/>(uint32\_t)(5)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_PI0\_MASK**](#define-ef_tmr32_ctrl_reg_pi0_mask)<sp/><sp/>(uint32\_t)(0x20)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_PI1\_BIT**](#define-ef_tmr32_ctrl_reg_pi1_bit)<sp/><sp/>(uint32\_t)(6)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_PI1\_MASK**](#define-ef_tmr32_ctrl_reg_pi1_mask)<sp/><sp/>(uint32\_t)(0x40)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_TE\_BIT**](#define-ef_tmr32_ctrl_reg_te_bit)<sp/><sp/>(uint32\_t)(0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_TE\_MASK**](#define-ef_tmr32_ctrl_reg_te_mask)<sp/><sp/>(uint32\_t)(0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_TS\_BIT**](#define-ef_tmr32_ctrl_reg_ts_bit)<sp/><sp/>(uint32\_t)(1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_CTRL\_REG\_TS\_MASK**](#define-ef_tmr32_ctrl_reg_ts_mask)<sp/><sp/>(uint32\_t)(0x2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_MX\_FLAG**](#define-ef_tmr32_mx_flag)<sp/><sp/>((uint32\_t)0x2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_MY\_FLAG**](#define-ef_tmr32_my_flag)<sp/><sp/>((uint32\_t)0x4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E0\_BIT**](#define-ef_tmr32_pwm0cfg_reg_e0_bit)<sp/><sp/>(uint32\_t)(0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E0\_MASK**](#define-ef_tmr32_pwm0cfg_reg_e0_mask)<sp/><sp/>(uint32\_t)(0x3)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E1\_BIT**](#define-ef_tmr32_pwm0cfg_reg_e1_bit)<sp/><sp/>(uint32\_t)(2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E1\_MASK**](#define-ef_tmr32_pwm0cfg_reg_e1_mask)<sp/><sp/>(uint32\_t)(0xc)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E2\_BIT**](#define-ef_tmr32_pwm0cfg_reg_e2_bit)<sp/><sp/>(uint32\_t)(4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E2\_MASK**](#define-ef_tmr32_pwm0cfg_reg_e2_mask)<sp/><sp/>(uint32\_t)(0x30)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E3\_BIT**](#define-ef_tmr32_pwm0cfg_reg_e3_bit)<sp/><sp/>(uint32\_t)(6)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E3\_MASK**](#define-ef_tmr32_pwm0cfg_reg_e3_mask)<sp/><sp/>(uint32\_t)(0xc0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E4\_BIT**](#define-ef_tmr32_pwm0cfg_reg_e4_bit)<sp/><sp/>(uint32\_t)(8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E4\_MASK**](#define-ef_tmr32_pwm0cfg_reg_e4_mask)<sp/><sp/>(uint32\_t)(0x300)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E5\_BIT**](#define-ef_tmr32_pwm0cfg_reg_e5_bit)<sp/><sp/>(uint32\_t)(10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM0CFG\_REG\_E5\_MASK**](#define-ef_tmr32_pwm0cfg_reg_e5_mask)<sp/><sp/>(uint32\_t)(0xc00)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E0\_BIT**](#define-ef_tmr32_pwm1cfg_reg_e0_bit)<sp/><sp/>(uint32\_t)(0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E0\_MASK**](#define-ef_tmr32_pwm1cfg_reg_e0_mask)<sp/><sp/>(uint32\_t)(0x3)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E1\_BIT**](#define-ef_tmr32_pwm1cfg_reg_e1_bit)<sp/><sp/>(uint32\_t)(2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E1\_MASK**](#define-ef_tmr32_pwm1cfg_reg_e1_mask)<sp/><sp/>(uint32\_t)(0xc)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E2\_BIT**](#define-ef_tmr32_pwm1cfg_reg_e2_bit)<sp/><sp/>(uint32\_t)(4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E2\_MASK**](#define-ef_tmr32_pwm1cfg_reg_e2_mask)<sp/><sp/>(uint32\_t)(0x30)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E3\_BIT**](#define-ef_tmr32_pwm1cfg_reg_e3_bit)<sp/><sp/>(uint32\_t)(6)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E3\_MASK**](#define-ef_tmr32_pwm1cfg_reg_e3_mask)<sp/><sp/>(uint32\_t)(0xc0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E4\_BIT**](#define-ef_tmr32_pwm1cfg_reg_e4_bit)<sp/><sp/>(uint32\_t)(8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E4\_MASK**](#define-ef_tmr32_pwm1cfg_reg_e4_mask)<sp/><sp/>(uint32\_t)(0x300)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E5\_BIT**](#define-ef_tmr32_pwm1cfg_reg_e5_bit)<sp/><sp/>(uint32\_t)(10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_PWM1CFG\_REG\_E5\_MASK**](#define-ef_tmr32_pwm1cfg_reg_e5_mask)<sp/><sp/>(uint32\_t)(0xc00)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_TMR32\_TO\_FLAG**](#define-ef_tmr32_to_flag)<sp/><sp/>((uint32\_t)0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**IO\_TYPES**](#define-io_types)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_R**](#define-__r)<sp/><sp/>volatile<sp/>const<sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_RW**](#define-__rw)<sp/><sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_W**](#define-__w)<sp/><sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_TMR32_TYPE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>struct<sp/>_EF_TMR32_TYPE_<sp/>EF_TMR32_TYPE;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_TMR32_TYPE_PTR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>EF_TMR32_TYPE*<sp/>EF_TMR32_TYPE_PTR;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>struct<sp/>`_EF_TMR32_TYPE_`</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Variables:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>CFG<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>CMPX<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>CMPY<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>CTRL<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>GCLK<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>IC<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_RW**](#define-__rw)<sp/>IM<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>MIS<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>PR<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>PWM0CFG<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>PWM1CFG<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>PWMDT<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>PWMFC<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>RELOAD<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>RIS<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>TMR<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>reserved_0<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CFG_REG_DIR_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CFG_REG_DIR_BIT<sp/>(uint32_t)(0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CFG_REG_DIR_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CFG_REG_DIR_MASK<sp/>(uint32_t)(0x3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CFG_REG_P_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CFG_REG_P_BIT<sp/>(uint32_t)(2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CFG_REG_P_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CFG_REG_P_MASK<sp/>(uint32_t)(0x4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_DTE_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_DTE_BIT<sp/>(uint32_t)(4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_DTE_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_DTE_MASK<sp/>(uint32_t)(0x10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_P0E_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_P0E_BIT<sp/>(uint32_t)(2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_P0E_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_P0E_MASK<sp/>(uint32_t)(0x4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_P1E_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_P1E_BIT<sp/>(uint32_t)(3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_P1E_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_P1E_MASK<sp/>(uint32_t)(0x8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_PI0_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_PI0_BIT<sp/>(uint32_t)(5)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_PI0_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_PI0_MASK<sp/>(uint32_t)(0x20)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_PI1_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_PI1_BIT<sp/>(uint32_t)(6)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_PI1_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_PI1_MASK<sp/>(uint32_t)(0x40)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_TE_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_TE_BIT<sp/>(uint32_t)(0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_TE_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_TE_MASK<sp/>(uint32_t)(0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_TS_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_TS_BIT<sp/>(uint32_t)(1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_CTRL_REG_TS_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_CTRL_REG_TS_MASK<sp/>(uint32_t)(0x2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_MX_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_MX_FLAG<sp/>((uint32_t)0x2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_MY_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_MY_FLAG<sp/>((uint32_t)0x4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E0_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E0_BIT<sp/>(uint32_t)(0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E0_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E0_MASK<sp/>(uint32_t)(0x3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E1_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E1_BIT<sp/>(uint32_t)(2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E1_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E1_MASK<sp/>(uint32_t)(0xc)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E2_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E2_BIT<sp/>(uint32_t)(4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E2_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E2_MASK<sp/>(uint32_t)(0x30)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E3_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E3_BIT<sp/>(uint32_t)(6)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E3_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E3_MASK<sp/>(uint32_t)(0xc0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E4_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E4_BIT<sp/>(uint32_t)(8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E4_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E4_MASK<sp/>(uint32_t)(0x300)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E5_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E5_BIT<sp/>(uint32_t)(10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM0CFG_REG_E5_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM0CFG_REG_E5_MASK<sp/>(uint32_t)(0xc00)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E0_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E0_BIT<sp/>(uint32_t)(0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E0_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E0_MASK<sp/>(uint32_t)(0x3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E1_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E1_BIT<sp/>(uint32_t)(2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E1_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E1_MASK<sp/>(uint32_t)(0xc)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E2_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E2_BIT<sp/>(uint32_t)(4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E2_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E2_MASK<sp/>(uint32_t)(0x30)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E3_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E3_BIT<sp/>(uint32_t)(6)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E3_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E3_MASK<sp/>(uint32_t)(0xc0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E4_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E4_BIT<sp/>(uint32_t)(8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E4_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E4_MASK<sp/>(uint32_t)(0x300)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E5_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E5_BIT<sp/>(uint32_t)(10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_PWM1CFG_REG_E5_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_PWM1CFG_REG_E5_MASK<sp/>(uint32_t)(0xc00)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_TMR32_TO_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_TMR32_TO_FLAG<sp/>((uint32_t)0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`IO_TYPES`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>IO_TYPES<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__R`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__R<sp/>volatile<sp/>const<sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__RW`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__RW<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__W`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__W<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="README.md"/>
  </compounddef>
</doxygen>
